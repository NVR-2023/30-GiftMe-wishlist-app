// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                       String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  surname                  String
  avatarImage              String?
  email                    String
  password                 String
  birthDate                DateTime
  primaryAddress           String
  secondaryAddress         String?
  createdAt                DateTime             @default(dbgenerated("now()"))
  createdGroups            Group[]              @relation("CreatedBy") // list of created groups
  groupMember              GroupMember[]        @relation("groupMember") // list of groups that user belongs to
  wishlists                Wishlist[] // wishlists created by this user
  wishlistMember           WishlistMember[] // wishlist this user belongs to
  wishlistInvitations      WishlistInvitation[] @relation("InvitedByUserProfile") // list of wishlist user invited to 
  wishlistInvitationMember WishlistInvitation[] @relation("ReceivedByUserProfile") // list of wishlists recieved by user
}

model Group {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupName    String
  createdAt    DateTime      @default(dbgenerated("now()"))
  isActive     Boolean
  createdBy    UserProfile   @relation("CreatedBy", fields: [createdById], references: [id])
  createdById  String        @db.Uuid // foreign key 
  groupMembers GroupMember[]
}

model GroupMember {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  isInvited      Boolean
  isAccepted     Boolean     @default(false)
  invitationDate DateTime    @default(dbgenerated("now()"))
  acceptanceDate DateTime
  group          Group       @relation(fields: [groupId], references: [id])
  groupId        String      @db.Uuid // foreign key
  currentUser    UserProfile @relation("groupMember", fields: [currentUserId], references: [id])
  currentUserId  String      @db.Uuid // foreign key
}

model Wishlist {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  createdBy           UserProfile          @relation(fields: [createdById], references: [id])
  createdById         String               @db.Uuid // foreign key
  isActive            Boolean
  createdAt           DateTime
  closedBy            DateTime
  wishlistMembers     WishlistMember[] // list of members of the wishlist
  wishlistInvitations WishlistInvitation[] //list of members invited to the wishlist
  gifts               Gift[]
}

model WishlistMember {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wishlist      Wishlist    @relation(fields: [wishlistId], references: [id])
  wishlistId    String      @db.Uuid
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  userProfileId String      @db.Uuid
}

model WishlistInvitation {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  wishlist       Wishlist    @relation(fields: [wishlistId], references: [id])
  wishlistId     String      @db.Uuid // foreign key
  isInvited      Boolean
  isAccepted     Boolean     @default(false)
  invitationDate DateTime
  acceptanceDate DateTime?
  invitedBy      UserProfile @relation("InvitedByUserProfile", fields: [invitedById], references: [id])
  invitedById    String      @db.Uuid // who issued the invitation
  receivedBy     UserProfile @relation("ReceivedByUserProfile", fields: [receivedById], references: [id])
  receivedById   String      @db.Uuid // who received the invitation 
}

model Gift {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  description           String
  vendor                String?
  url                   String?
  image                 String?
  price                 Float?
  category              String?
  currency              String?
  isPriceTracked        Boolean
  priceUpperLimit       Float?
  priceLowerLimit       Float?
  status                String // Consider using an enum type for status
  reservationDate       DateTime?
  reservedBy            String?
  isPurchased           Boolean
  purchasedDate         DateTime?
  deliveryDate          DateTime?
  isDeliveredToReceiver Boolean?
  wishlist              Wishlist  @relation(fields: [wishlistId], references: [id])
  wishlistId            String    @db.Uuid
}

model Notification {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  message          String
  status           NotificationStatus
  timestamp        DateTime           @default(dbgenerated("now()"))
  notificationType NotificationType
}

// Enum naming convention (PascalCase)
enum NotificationType {
  GROUP
  WISHLIST
  GIFT_RESERVATION
  GIFT_PURCHASE
}

// Enum naming convention (PascalCase)
enum NotificationStatus {
  PENDING
  READ
  UNREAD
  ARCHIVED
  DISMISSED
}
